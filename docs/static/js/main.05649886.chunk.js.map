{"version":3,"sources":["components/LoginButton.js","components/LogoutButton.js","utils/post-messages-utils.js","components/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["LoginButton","loginWithRedirect","useAuth0","className","onClick","LogoutButton","logout","returnTo","window","location","href","postMessageToWebView","type","data","a","ReactNativeWebView","postMessage","JSON","stringify","console","log","handleMessage","message","alert","getValidAccessToken","audience","scope","accessToken","substring","Profile","user","isAuthenticated","isLoading","getAccessTokenSilently","React","useState","userMetadata","setUserMetadata","useEffect","domain","userSub","sub","userDetailsByIdUrl","fetch","headers","Authorization","metadataResponse","json","user_metadata","getUserMetadata","name","email","style","display","border","textAlign","padding","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","addEventListener","ReactDOM","render","StrictMode","clientId","redirectUri","document","getElementById"],"mappings":"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","file":"static/js/main.05649886.chunk.js","sourcesContent":["import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nimport \"./Button.css\";\n\nconst LoginButton = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  return <button className=\"button\" onClick={() => loginWithRedirect()}>Log In</button>;\n};\n\nexport default LoginButton;\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nimport \"./Button.css\";\n\n\nconst LogoutButton = () => {\n  const { logout } = useAuth0();\n\n  return (\n    <button className=\"button\" onClick={() => logout({ returnTo: window.location.href })}>\n      Log Out\n    </button>\n  );\n};\n\nexport default LogoutButton;\n","export const postMessageToWebView = async (type, data) => {\n  if (window && window.ReactNativeWebView) {\n    window.ReactNativeWebView.postMessage(JSON.stringify({ type, data }));\n    return true;\n  }\n\n  console.log(`ReactNativeWebView not available for sending [${type}] message`);\n  return false;\n};\n\nexport const registerGlobalMessagesListener = () => {\n  console.log('Registering our messages handler globally');\n  window.addEventListener('message', handleMessage);\n}\n\nasync function handleMessage(message) {\n  alert(`SPA received a message: \\n${message}`);\n\n  const { type, data } = message;\n  switch (type) {\n    case 'getValidAccessToken':\n      const domain = \"amwebexpert.us.auth0.com\";\n      const accessToken = await window.getValidAccessToken({\n        audience: `https://${domain}/api/v2/`,\n        scope: \"read:current_user\",\n      });\n      const data = {type: `freshAccessToken ${accessToken.substring(0, 5)}...`, data: accessToken};\n      await postMessageToWebView('accessTokenRetrieved', data);\n    break;\n  \n    default:\n      break;\n  }\n}\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nimport {postMessageToWebView} from '../utils/post-messages-utils';\n\nconst Profile = () => {\n  const {\n    user,\n    isAuthenticated,\n    isLoading,\n    getAccessTokenSilently,\n  } = useAuth0();\n  const [userMetadata, setUserMetadata] = React.useState(null);\n\n  React.useEffect(() => {\n    const getUserMetadata = async () => {\n      const domain = \"amwebexpert.us.auth0.com\";\n\n      try {\n        const accessToken = await getAccessTokenSilently({\n          audience: `https://${domain}/api/v2/`,\n          scope: \"read:current_user\",\n        });\n\n        const data = {accessToken, userSub: user.sub};\n        postMessageToWebView('accessTokenRetrieved', data);\n\n        const userDetailsByIdUrl = `https://${domain}/api/v2/users/${user.sub}`;\n\n        const metadataResponse = await fetch(userDetailsByIdUrl, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n\n        const { user_metadata } = await metadataResponse.json();\n\n        setUserMetadata(user_metadata);\n      } catch (e) {\n        console.log(e.message);\n      }\n    };\n\n    if (user) {\n      getUserMetadata();\n    }\n  }, [getAccessTokenSilently, user]);\n\n  if (isLoading) {\n    return <div>Loading ...</div>;\n  }\n\n  return (\n    isAuthenticated && (\n      <div>\n        <h2>{user.name}</h2>\n        <p>{user.email}</p>\n        <div><strong>User metadata:</strong></div>\n        {userMetadata ? (\n          <pre style={{ display: 'inline-block', border: '1px solid grey', textAlign: \"left\", padding: 20 }}>\n            {JSON.stringify(userMetadata, null, 2)}\n          </pre>\n        ) : (\n          \"No user metadata defined\"\n        )}\n      </div>\n    )\n  );\n};\n\nexport default Profile;\n","import { useAuth0 } from \"@auth0/auth0-react\";\n\nimport LoginButton from \"./components/LoginButton\";\nimport LogoutButton from \"./components/LogoutButton\";\nimport Profile from \"./components/Profile\";\n\nimport \"./App.css\";\nimport React from \"react\";\n\nfunction App() {\n  const { isAuthenticated, getAccessTokenSilently } = useAuth0();\n\n  React.useEffect(() => {\n    window.getValidAccessToken = getAccessTokenSilently;\n  }, [getAccessTokenSilently]);\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h3>SPA integrating Auth0 lib</h3>\n        <div>Login and logout through OAuth2 flow</div>\n      </header>\n\n      <div className=\"actions\">\n        {!isAuthenticated && <LoginButton />}\n        {isAuthenticated && <LogoutButton />}\n      </div>\n\n      <Profile />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { registerGlobalMessagesListener } from \"./utils/post-messages-utils\";\n\n// Setup our messages receiver\nregisterGlobalMessagesListener();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain=\"amwebexpert.us.auth0.com\"\n      clientId=\"ofZTxqmsiHSIu9uLHjlevHRDKObDAhuP\"\n      redirectUri={window.location.href}\n      audience=\"https://amwebexpert.us.auth0.com/api/v2/\"\n      scope=\"read:current_user update:current_user_metadata\"\n    >\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Auth0Provider>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}