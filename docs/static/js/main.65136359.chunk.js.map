{"version":3,"sources":["components/LoginButton.js","components/LogoutButton.js","components/Profile.js","App.js","reportWebVitals.js","index.js"],"names":["LoginButton","loginWithRedirect","useAuth0","className","onClick","LogoutButton","logout","returnTo","window","location","href","Profile","user","isAuthenticated","isLoading","getAccessTokenSilently","React","useState","userMetadata","setUserMetadata","useEffect","a","domain","audience","scope","accessToken","ReactNativeWebView","data","userSub","sub","postMessage","JSON","stringify","console","log","userDetailsByIdUrl","fetch","headers","Authorization","metadataResponse","json","user_metadata","message","getUserMetadata","name","email","style","display","border","textAlign","padding","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","clientId","redirectUri","document","getElementById"],"mappings":"4PAWeA,EANK,WAAO,IACjBC,EAAsBC,cAAtBD,kBAER,OAAO,wBAAQE,UAAU,SAASC,QAAS,kBAAMH,KAA1C,qBCQMI,EAVM,WAAO,IAClBC,EAAWJ,cAAXI,OAER,OACE,wBAAQH,UAAU,SAASC,QAAS,kBAAME,EAAO,CAAEC,SAAUC,OAAOC,SAASC,QAA7E,sB,gCC8DWC,EArEC,WAAO,IAAD,EAMhBT,cAJFU,EAFkB,EAElBA,KACAC,EAHkB,EAGlBA,gBACAC,EAJkB,EAIlBA,UACAC,EALkB,EAKlBA,uBALkB,EAOoBC,IAAMC,SAAS,MAPnC,mBAObC,EAPa,KAOCC,EAPD,KA+CpB,OAtCAH,IAAMI,WAAU,WAiCVR,GAhCiB,uCAAG,wCAAAS,EAAA,6DAChBC,EAAS,2BADO,kBAIMP,EAAuB,CAC/CQ,SAAS,WAAD,OAAaD,EAAb,YACRE,MAAO,sBANW,cAIdC,EAJc,OAShBjB,OAAOkB,oBACHC,EAAO,CAACF,cAAaG,QAAShB,EAAKiB,KACzCrB,OAAOkB,mBAAmBI,YAAYC,KAAKC,UAAUL,KAErDM,QAAQC,IAAI,mCAAoCT,EAAab,EAAKiB,KAG9DM,EAhBc,kBAgBkBb,EAhBlB,yBAgByCV,EAAKiB,KAhB9C,SAkBWO,MAAMD,EAAoB,CACvDE,QAAS,CACPC,cAAc,UAAD,OAAYb,MApBT,cAkBdc,EAlBc,iBAwBYA,EAAiBC,OAxB7B,iBAwBZC,EAxBY,EAwBZA,cAERtB,EAAgBsB,GA1BI,kDA4BpBR,QAAQC,IAAI,KAAEQ,SA5BM,0DAAH,oDAiCnBC,KAED,CAAC5B,EAAwBH,IAExBE,EACK,8CAIPD,GACE,gCACE,6BAAKD,EAAKgC,OACV,4BAAIhC,EAAKiC,QACT,8BAAK,sDACJ3B,EACC,qBAAK4B,MAAO,CAAEC,QAAS,eAAgBC,OAAQ,iBAAkBC,UAAW,OAAQC,QAAS,IAA7F,SACGnB,KAAKC,UAAUd,EAAc,KAAM,KAGtC,+B,MCrCKiC,MApBf,WAAgB,IACNtC,EAAoBX,cAApBW,gBAER,OACE,sBAAKV,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,2DACA,0EAGF,sBAAKA,UAAU,UAAf,WACIU,GAAmB,cAAC,EAAD,IACpBA,GAAmB,cAAC,EAAD,OAGtB,cAAC,EAAD,QCXSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,IAAD,CACEzC,OAAO,2BACP0C,SAAS,mCACTC,YAAazD,OAAOC,SAASC,KAC7Ba,SAAS,2CACTC,MAAM,iDALR,SAOE,cAAC,IAAD,UACE,cAAC,EAAD,QATN,OAcA0C,SAASC,eAAe,SAM1Bf,EAAgBnB,QAAQC,O","file":"static/js/main.65136359.chunk.js","sourcesContent":["import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nimport \"./Button.css\";\n\nconst LoginButton = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  return <button className=\"button\" onClick={() => loginWithRedirect()}>Log In</button>;\n};\n\nexport default LoginButton;\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nimport \"./Button.css\";\n\n\nconst LogoutButton = () => {\n  const { logout } = useAuth0();\n\n  return (\n    <button className=\"button\" onClick={() => logout({ returnTo: window.location.href })}>\n      Log Out\n    </button>\n  );\n};\n\nexport default LogoutButton;\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst Profile = () => {\n  const {\n    user,\n    isAuthenticated,\n    isLoading,\n    getAccessTokenSilently,\n  } = useAuth0();\n  const [userMetadata, setUserMetadata] = React.useState(null);\n\n  React.useEffect(() => {\n    const getUserMetadata = async () => {\n      const domain = \"amwebexpert.us.auth0.com\";\n\n      try {\n        const accessToken = await getAccessTokenSilently({\n          audience: `https://${domain}/api/v2/`,\n          scope: \"read:current_user\",\n        });\n\n        if (window.ReactNativeWebView) {\n          const data = {accessToken, userSub: user.sub};\n          window.ReactNativeWebView.postMessage(JSON.stringify(data));\n        } else {\n          console.log('ReactNativeWebView not available', accessToken, user.sub);\n        }\n\n        const userDetailsByIdUrl = `https://${domain}/api/v2/users/${user.sub}`;\n\n        const metadataResponse = await fetch(userDetailsByIdUrl, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n\n        const { user_metadata } = await metadataResponse.json();\n\n        setUserMetadata(user_metadata);\n      } catch (e) {\n        console.log(e.message);\n      }\n    };\n\n    if (user) {\n      getUserMetadata();\n    }\n  }, [getAccessTokenSilently, user]);\n\n  if (isLoading) {\n    return <div>Loading ...</div>;\n  }\n\n  return (\n    isAuthenticated && (\n      <div>\n        <h2>{user.name}</h2>\n        <p>{user.email}</p>\n        <div><strong>User metadata:</strong></div>\n        {userMetadata ? (\n          <pre style={{ display: 'inline-block', border: '1px solid grey', textAlign: \"left\", padding: 20 }}>\n            {JSON.stringify(userMetadata, null, 2)}\n          </pre>\n        ) : (\n          \"No user metadata defined\"\n        )}\n      </div>\n    )\n  );\n};\n\nexport default Profile;\n","import { useAuth0 } from \"@auth0/auth0-react\";\n\nimport LoginButton from \"./components/LoginButton\";\nimport LogoutButton from \"./components/LogoutButton\";\nimport Profile from \"./components/Profile\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const { isAuthenticated } = useAuth0();\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h3>SPA integrating Auth0 lib</h3>\n        <div>Login and logout through OAuth2 flow</div>\n      </header>\n\n      <div className=\"actions\">\n        {!isAuthenticated && <LoginButton />}\n        {isAuthenticated && <LogoutButton />}\n      </div>\n\n      <Profile />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain=\"amwebexpert.us.auth0.com\"\n      clientId=\"ofZTxqmsiHSIu9uLHjlevHRDKObDAhuP\"\n      redirectUri={window.location.href}\n      audience=\"https://amwebexpert.us.auth0.com/api/v2/\"\n      scope=\"read:current_user update:current_user_metadata\"\n    >\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Auth0Provider>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}